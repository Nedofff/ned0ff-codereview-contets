const express = require("express");const fs = require("fs");const path = require("path");const cors = require("cors");const app = express();const PORT = process.env.PORT || 3001;app.use(cors());app.use(express.json());app.use((req, res, next) => {  const startTime = Date.now();  const timestamp = new Date().toLocaleString("ru-RU");  const method = req.method;  const url = req.originalUrl;  const ip = req.ip || req.connection.remoteAddress || "unknown";  console.log(`\nüåê [${timestamp}] ${method} ${url}`);  console.log(`üìç IP: ${ip}`);  if (req.headers.authorization) {    console.log(`üîê Auth: ${req.headers.authorization.substring(0, 20)}...`);  } else {    console.log(`‚ùå Auth: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);  }  if (Object.keys(req.query).length > 0) {    console.log(`üîç Query: ${JSON.stringify(req.query)}`);  }  const originalJson = res.json;  res.json = function (body) {    const endTime = Date.now();    const duration = endTime - startTime;    const statusCode = res.statusCode;    let statusEmoji = "‚úÖ";    if (statusCode >= 400 && statusCode < 500) statusEmoji = "‚ö†Ô∏è";    if (statusCode >= 500) statusEmoji = "‚ùå";    console.log(`${statusEmoji} –û—Ç–≤–µ—Ç: ${statusCode} (${duration}ms)`);    if (body && body.items) {      console.log(        `üì¶ –î–∞–Ω–Ω—ã—Ö: ${body.items.length}/${body.total} (skip: ${body.skip}, limit: ${body.limit})`      );    } else if (body && body.message) {      console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${body.message}`);    }    console.log(`${"‚îÄ".repeat(60)}`);    return originalJson.call(this, body);  };  next();});const loadData = () => {  const dataPath = path.join(__dirname, "db.json");  const rawData = fs.readFileSync(dataPath, "utf8");  return JSON.parse(rawData);};const authMiddleware = (req, res, next) => {  const token = req.headers.authorization;  if (!token) {    return res.status(401).json({      message: "–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",    });  }  if (!token.startsWith("Bearer ")) {    return res.status(401).json({      message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞",    });  }  next();};const createPaginationResponse = (items, skip = 0, limit = 10) => {  console.log(    "items",    items.map((item) => item.id)  );  const startIndex = skip;  const endIndex = startIndex + limit;  const paginatedItems = items.slice(startIndex, endIndex);  console.log(    "paginatedItems",    paginatedItems.map((item) => item.id)  );  return {    items: paginatedItems,    total: items.length,    skip: skip,    limit: limit,  };};const collections = [  "vacancies",  "aiTools",  "events",  "petProjects",  "questions",  "recruiters",  "resumes",  "testTasks",  "requirements",];collections.forEach((collection) => {  app.get(`/api/${collection}`, (req, res) => {    try {      const data = loadData();      const items = data[collection] || [];      const skip = parseInt(req.query.skip) || 0;      const limit = parseInt(req.query.limit) || 10;      const sortBy = req.query.sort_by || null;      const order = req.query.order || "asc";      let sortedItems = [...items];      if (        sortBy &&        sortedItems.length > 0 &&        sortedItems[0][sortBy] !== undefined      ) {        sortedItems.sort((a, b) => {          const aVal = a[sortBy];          const bVal = b[sortBy];          if (typeof aVal === "string" && typeof bVal === "string") {            return order === "asc"              ? aVal.localeCompare(bVal)              : bVal.localeCompare(aVal);          }          if (typeof aVal === "number" && typeof bVal === "number") {            return order === "asc" ? aVal - bVal : bVal - aVal;          }          return 0;        });      }      const paginatedResponse = createPaginationResponse(        sortedItems,        skip,        limit      );      res.json(paginatedResponse);    } catch (error) {      res.status(500).json({        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö",        error: error.message,      });    }  });  app.get(`/api/${collection}/:id`, (req, res) => {    console.log("GET BY ID", req.params.id);    try {      const data = loadData();      const items = data[collection] || [];      const id = parseInt(req.params.id);      const item = items.find((item) => item.id === id);      if (!item) {        return res.status(404).json({          message: `–≠–ª–µ–º–µ–Ω—Ç —Å ID ${id} –Ω–µ –Ω–∞–π–¥–µ–Ω`,        });      }      res.json(item);    } catch (error) {      res.status(500).json({        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö",        error: error.message,      });    }  });});app.get("/api/health", (req, res) => {  res.json({    status: "OK",    timestamp: new Date().toISOString(),    message: "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",  });});app.use((req, res) => {  res.status(404).json({    message: "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",  });});app.use((err, req, res) => {  console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err.stack);  res.status(500).json({    message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",  });});app.listen(PORT, () => {  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);  console.log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:`);  collections.forEach((collection) => {    console.log(`  GET /${collection} - –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ ${collection}`);    console.log(`  GET /${collection}/:id - –ø–æ–ª—É—á–∏—Ç—å ${collection} –ø–æ ID`);  });  console.log(`  GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞`);});module.exports = app;