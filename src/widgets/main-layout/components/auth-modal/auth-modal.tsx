"use client";
import { Button, Popup } from "@/ui-kit";
import {
  AuthLayout,
  InfoScreenLayout,
  SuccessLayout,
} from "./components/layout";
import { LoginForm } from "./components/login-form";
import { SignInForm } from "./components/signin-form";
import { Hearts } from "./components/hearts";
import { useAuthModal } from "./state/use-auth-modal";
import { Channels } from "./components/channels";
export function AuthModal() {
  const { isOpen, close, step, setStep } = useAuthModal();
  const renderContent = () => {
    switch (step) {
      case "login":
        return (
          <>
            <InfoScreenLayout>
              –í—ã –≥–æ—Ç–æ–≤—ã –∫ –±–æ–ª—å—à–µ–º—É. <br />
              –ú—ã –ø–æ–º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å.
            </InfoScreenLayout>
            <div className="flex-1">
              <LoginForm
                goToRegister={() => setStep("register")}
                onSuccess={() => setStep("success")}
              />
            </div>
          </>
        );
      case "register":
        return (
          <>
            <InfoScreenLayout>
              –í—ã –≥–æ—Ç–æ–≤—ã –∫ –±–æ–ª—å—à–µ–º—É. <br />
              –ú—ã –ø–æ–º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å.
            </InfoScreenLayout>
            <div className="flex-1">
              <SignInForm
                goToLogin={() => setStep("login")}
                onSuccess={() => setStep("success")}
              />
            </div>
          </>
        );
      case "success":
        return (
          <>
            <Channels />
            <SuccessLayout>
              <SuccessLayout.Title>
                –¢—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è!
              </SuccessLayout.Title>
              <SuccessLayout.Text>
                –ù–∞ –Ω–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ —Å–æ–±—Ä–∞–Ω–æ –±–æ–ª—å—à–µ 1.000 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π,
                —Å–æ—Ç–Ω–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π, –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–µ–∫—Ä—É—Ç–µ—Ä–æ–≤ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.
              </SuccessLayout.Text>
              <SuccessLayout.Text>
                –í—Å–µ —ç—Ç–æ –º—ã –æ—Ç–¥–∞–µ–º —Ç–µ–±–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –≤–∑–∞–º–µ–Ω –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–∏
                —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã. –ò–º–µ–Ω–Ω–æ –æ–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à—É
                –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –≤–µ—Å—å –Ω–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç.
              </SuccessLayout.Text>
              <Button
                fullWidth
                onClick={() => setStep("thanks")}
                className="md:mt-34.5"
              >
                –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
              </Button>
            </SuccessLayout>
          </>
        );
      case "thanks":
        return (
          <>
            <InfoScreenLayout className="h-[532px]">
              <Hearts />
            </InfoScreenLayout>
            <SuccessLayout>
              <SuccessLayout.Title>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫–∏!</SuccessLayout.Title>
              <SuccessLayout.Text>
                –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç –∏ –±—É–¥–µ—Ç –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è
                —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞.
              </SuccessLayout.Text>
              <SuccessLayout.Text>
                –ñ–µ–ª–∞–µ–º —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã ü©µ
              </SuccessLayout.Text>
              <Button onClick={close} fullWidth className="md:mt-67.5">
                –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
              </Button>
            </SuccessLayout>
          </>
        );
      default:
        return null;
    }
  };
  return (
    <Popup isOpen={isOpen} onClose={close}>
      <AuthLayout>{renderContent()}</AuthLayout>
    </Popup>
  );
}
